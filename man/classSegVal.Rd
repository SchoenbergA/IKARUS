% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/classSegVal.R
\name{classSegVal}
\alias{classSegVal}
\title{Validate a Tree Prediction with TreeCrown Segments}
\usage{
classSegVal(pred, seg, classTree = NULL, reclass = NULL)
}
\arguments{
\item{pred}{RasterLayer - Prediction to be validated}

\item{seg}{PolygonLayer - Segments with TreeCrowns}

\item{classTree}{numeric - The class representing Trees}

\item{reclass}{optional - numeric value of class to merge into class "trees", for multiple classes to merge use reclass=c(x,y)}
}
\value{
returns the validation score
\itemize{
\item return and plot the "tree \link{1} and no tree \link{2}" layer, will be reclassified if 'reclass' is used.
\item result table
}
\itemize{
\item nclass - amount of cells for class 'tree' (may differ if 'reclass' is used)
\item nseg - amount of cells for all TreeCrowns
\item overclass - amount of cells for classification not occuring in TreeCrowns (over classification)
\item underclass -  amount of cells for TreeCrowns not occuring in the classification (under classification)
\item hit - amount of cells for classification occuring in TreeCrowns
\item hitrate - amount of hit in relation to total classification cells in \%
\item rate underclass - amount of underclass in relation to total TreeCrown cells in \%
\item rate overclass -amount of overclass in relation to total classification cells in \%
}
\itemize{
\item validation score hitrate @ overrate + underrate
}
}
\description{
calculates the amount of cells for class "trees" which overlap with TreeCrown Segments.
}
\examples{
# load data
require(caret)
require(CAST)
require(doParallel)
require(raster)
require(IKARUS)
require(mapview)
lau_Stk <- raster::stack(system.file("extdata","lau_Stk.tif",package = "IKARUS"))
lau_tP <-rgdal::readOGR(system.file("extdata","lau_TrainPoly.shp",package = "IKARUS"))
# handle CRS string
crs(lau_tP) <- crs(lau_Stk)
# load segments
lau_seg <-rgdal::readOGR(system.file("extdata","lau_TreeSeg.shp",package = "IKARUS"))
# handle CRS string
crs(lau_seg) <- crs(lau_Stk)
#set layer names
names(lau_Stk)<- c("blue","green","red","nir","NDVI","NDVI_sum3","NDVI_sobel3")
### extract values using 'exrct_Tdat' to generate training dataset
tDat <- exrct_Traindat(lau_tP,lau_Stk,"class")
# check for class column and predictor columns in input training dataset
head(tDat)
# classification
model1 <- RFclass(tDat = tDat,predCol = "default",predStk = lau_Stk,classCol = "class")
#check model and seg
plot(model1$prediction)
plot(lau_seg)

# test several combinations of classes for tress
tree <- classSegVal(  pred=model1$prediction,  seg=lau_seg,  classTree=4,  reclass=NULL)
tnsha <- classSegVal(  pred=model1$prediction,  seg=lau_seg,  classTree=4,  reclass=2)
tnshangras <- classSegVal(  pred=model1$prediction,  seg=lau_seg,  classTree=4,  reclass=c(2,3))
}
\author{
Andreas SchÃ¶nberg
}
